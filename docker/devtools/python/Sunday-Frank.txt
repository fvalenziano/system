Overload '+' operator to work with a custom class


Create class Values that adds the value of 'x' and 'y', with default values of 0 for each.
Define a function within class Values that prints Values as a string instead of an object.
Create a function that overloads the '+' operator to handle our class Values inputs.

class Values:
    def __init__(self, x = 0, y = 0):
        self.x = x
        self.y = y
    
    def __str__(self):
        return "({0},{1})".format(self.x,self.y)

    def __add__(self,input):
        x = self.x + input.x
        y = self.y + input.y
        return Values(x,y)

>>> p1 = Values(1,1)
>>> p2 = Values(2,2)
>>> print(v1 + v2)


E2. Overload '>' operator
Create class Compare that performs a 'greater than' comparison of two user supplied values

class Compare:
    def __init__(self, x):
        self.x = x
    def __gt__(self, input):
        if(self.x>input.x):
            return True
        else:
            return False

c1 = Compare(4)
c2 = Compare(5)
if(c1>c2):
    print("c1 greater than c2")
else:
    print("c2 greater than c1")


E3. Using a generator and nested for loop, print value1 and value2 as pairs until all values are exhausted

value1 = ['a', 'b', 'c', 'd']
value2 = ['1', '2', '3', '4', '5']

def values():
    for v1 in value1:
        for v2 in value2:
            yield v1, v2

E4. Use a generator expression instead of for loop to achieve same task as E3

value1 = ['a', 'b', 'c', 'd']
value2 = [1, 2, 3, 4, 5]

values = ((v1, v2) for v1 in value1 for v2 in value2)
for i in values:
    print(i)

('a', 1)
('a', 2)
('a', 3)
('a', 4)
('a', 5)
...
('e', 1)
('e', 2)
('e', 3)
('e', 4)
('e', 5)
